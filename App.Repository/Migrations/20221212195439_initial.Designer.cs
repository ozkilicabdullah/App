// <auto-generated />
using System;
using App.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221212195439_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("App.Core.Models.EmailSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("ApiTransactionCode")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("bit");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<int>("SendingProtokol")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiKey = "123",
                            ApiTransactionCode = "123",
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7159),
                            EnableSsl = true,
                            Host = "smtp.office365.com",
                            Name = "Genel Smtp",
                            Password = "!applogin!99",
                            Port = 587,
                            SenderEmail = "digiapplogin@outlook.com.tr",
                            SenderName = "digiapplogin@outlook.com.tr",
                            SendingProtokol = 0,
                            Status = 0,
                            UserName = "digiapplogin@outlook.com.tr"
                        });
                });

            modelBuilder.Entity("App.Core.Models.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionHTML")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailSettingID")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("SendingContentType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailSettingID");

                    b.ToTable("EmailTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7459),
                            DescriptionHTML = "<p>Üyeliğinizi tamamlamak için son adım. Üyeliğinizi onaylamak için <a href='MailConfirmationValidationSecretKey'>buraya tıklayınız.</a></p>",
                            DescriptionText = "Üyelik onay maili",
                            EmailSettingID = 1,
                            Name = "New member",
                            SendingContentType = 0,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7464),
                            DescriptionHTML = "<p>Paraloanızı sıfırlamak için <a href='ResetPasswordSecretKey'>buraya tıklayınız.</a></p>",
                            DescriptionText = "Şifremi Unuttum",
                            EmailSettingID = 1,
                            Name = "Foget my password",
                            SendingContentType = 1,
                            Status = 0
                        });
                });

            modelBuilder.Entity("App.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailConfirmationSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForgetPaswordSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MailConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResetPasswordSecretKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7879),
                            Email = "manager1@manager.com",
                            IsEmailConfirmed = true,
                            MailConfirmedDate = new DateTime(2022, 12, 12, 23, 54, 38, 897, DateTimeKind.Local).AddTicks(7880),
                            Name = "app.manager manager1",
                            Password = "57801fc3d556f5522d975545d20419b9",
                            Role = "Manager",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7927),
                            Email = "user1@manager.com",
                            IsEmailConfirmed = false,
                            MailConfirmedDate = new DateTime(2022, 12, 13, 0, 54, 38, 897, DateTimeKind.Local).AddTicks(7928),
                            Name = "app.user user1",
                            Password = "3872849effd186dbceb03cf0cf22e6a8",
                            Role = "user",
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7943),
                            Email = "user2@manager.com",
                            IsEmailConfirmed = true,
                            MailConfirmedDate = new DateTime(2022, 12, 13, 1, 54, 38, 897, DateTimeKind.Local).AddTicks(7943),
                            Name = "app.user user2",
                            Password = "3872849effd186dbceb03cf0cf22e6a8",
                            Role = "user",
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7955),
                            Email = "user2@manager.com",
                            IsEmailConfirmed = false,
                            Name = "app.user user2",
                            Password = "3872849effd186dbceb03cf0cf22e6a8",
                            Role = "user",
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(7971),
                            Email = "user3@manager.com",
                            IsEmailConfirmed = false,
                            Name = "app.user user3",
                            Password = "3872849effd186dbceb03cf0cf22e6a8",
                            Role = "user",
                            Status = 0
                        });
                });

            modelBuilder.Entity("App.Core.Models.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("App.Core.Models.UserRegisterHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRegisterHistories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfirmDate = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(8383),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ConfirmDate = new DateTime(2022, 12, 12, 22, 54, 38, 897, DateTimeKind.Local).AddTicks(8389),
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("App.Core.Models.EmailTemplate", b =>
                {
                    b.HasOne("App.Core.Models.EmailSetting", "EmailSetting")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("EmailSettingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailSetting");
                });

            modelBuilder.Entity("App.Core.Models.UserRegisterHistory", b =>
                {
                    b.HasOne("App.Core.Models.User", "User")
                        .WithMany("UserRegisterHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Core.Models.EmailSetting", b =>
                {
                    b.Navigation("EmailTemplates");
                });

            modelBuilder.Entity("App.Core.Models.User", b =>
                {
                    b.Navigation("UserRegisterHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
